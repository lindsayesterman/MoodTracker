{"version":3,"sources":["firebase.js","Auth/Auth.js","Auth/Home.js","Auth/LogIn.js","Auth/SignUp.js","img/faceOne.svg","img/faceTwo.svg","img/faceThree.svg","img/faceFour.svg","img/faceFive.svg","img/shimmerStar.svg","Stars/Stars.js","Emoji.js","img/backBtn.svg","BackBtn/BackBtn.js","img/lineGraphBtn.svg","img/barGraphBtn.svg","helpers.js","StatBox/StatBox.js","GraphPage/GraphPage.js","MoodExp/MoodExp.js","SelectMood/SelectMood.js","ConditionalRenderHelp.js","MoodTracker/MoodTracker.js","index.js"],"names":["firebaseConfig","firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","AuthContext","React","createContext","AuthProvider","children","useState","loading","setLoading","currentUser","setCurrentUser","useEffect","auth","onAuthStateChanged","user","uid","firestore","collection","doc","set","email","Provider","value","Home","useContext","to","onClick","signOut","LogIn","props","onSubmit","e","preventDefault","target","elements","password","signInWithEmailAndPassword","error","alert","type","placeholder","name","SignUp","createUserWithEmailAndPassword","onChange","getUserEmail","id","Stars","alt","className","src","star","Emoji","role","aria-label","label","aria-hidden","symbol","BackBtn","backBtn","convertNumToEmotion","num","parseFloat","indexOfMax","arr","length","max","maxIndex","i","findMostCommonTag","allMoods","month","j","tags","push","prev","a","b","sort","result","index","tag","splice","index2","tag2","findMostCommonMood","x","y","bestStreak","bestElem","feeling","currentStreak","currentElem","StatBox","GraphPage","handleTimeRangeClicked","setState","timeRange","getGraphData","removeLineAddBar","lineClicked","barClicked","removeBarAddLine","setGraphBackBtnClicked","graphBackBtnClicked","addDynamicGraphColoring","backgroundColors","data","getLabelsAndDataForTimeRange","datasets","addGraphGradient","gradient","document","getElementById","getContext","createLinearGradient","addColorStop","getDaysInMonth","now","Date","days","getFullYear","getMonth","getDate","arrayOfDays","getWeekData","dataRequested","curr","weekData","week","indexes","notesData","tagsData","first","getDay","day","setDate","toISOString","slice","date","explanation","join","getMonthData","year","monthData","getYearlyAverages","yearData","yearAverages","total","count","totalArr","monthlyTags","numDaysCompletedInMonth","getYear","state","labels","breakString","str","limit","brokenString","getNotesAndTagsOnGraphHover","item","hoverInfo","weekExp","dataIndex","weekTags","Math","round","raw","monthExp","monthTags","dataLabels","numericalData","self","options","plugins","legend","display","tooltip","callbacks","title","everything","backgroundColor","padding","xAlign","scales","min","ticks","stepSize","color","font","size","grid","graphData","fill","borderColor","borderWidth","pointBackgroundColor","pointBorderColor","pointRadius","pointHoverRadius","barData","border","this","mood","pushMoodToDb","fetchData","callback","getExp","getTags","pageTransition","pageVariants","getMoodClicked","dateMoodWasLastEntered","addToAllMoods","removeAllMoods","db","updateShowMood","showMood","f5","f4","f3","f2","f1","bg","lg","Component","MoodExp","submitClicked","setSubmitClicked","motion","div","initial","animate","exit","transition","variants","includes","autoComplete","SelectMood","substring","lastIndexOf","ConditionalRenderHelp","fetchLastDateEntered","contextType","in","opacity","out","outRight","outFade","duration","MoodTracker","context","moodTrackerUserRef","get","then","exists","docId","todaysMoodDocId","updateLastDateMoodEntered","lastDateEntered","add","setMoodForToday","docRef","catch","console","update","moodTrackerRef","orderBy","snapshot","empty","forEach","key","removeTag","filter","t","concat","bool","tzoffset","getTimezoneOffset","AnimatePresence","exact","path","render","routeProps","component","ReactDOM"],"mappings":"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","file":"static/js/main.943fa6ee.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\"\nimport 'firebase/firestore';\n\n\nvar firebaseConfig = firebase.initializeApp({\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID,\n});\n\nexport default firebaseConfig;\n","import React, { useEffect, useState } from \"react\";\nimport firebaseConfig from \"../firebase.js\";\nimport firebase from \"../firebase.js\";\nimport \"./Auth.css\";\n\nexport const AuthContext = React.createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [loading, setLoading] = useState(true);\n  const [currentUser, setCurrentUser] = useState(null);\n  useEffect(() => {\n    firebaseConfig.auth().onAuthStateChanged((user) => {\n      if (user) {\n        const uid = user.uid;\n        firebase.firestore().collection(\"users\").doc(uid).set({\n          email: user.email,\n        });\n      }\n      setCurrentUser(user);\n      setLoading(false);\n    });\n  }, []);\n\n  if (loading) {\n    return <p>Loading...</p>;\n  }\n\n  return (\n    <AuthContext.Provider value={{ currentUser }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n","import React, { useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { AuthContext } from \"./Auth\";\nimport firebaseConfig from \"../firebase.js\";\n\nfunction signOut(e) {\n  firebaseConfig.auth().signOut();\n}\n\nconst Home = () => {\n  const { currentUser } = useContext(AuthContext);\n  return (\n    <>\n      <h1>Home</h1>\n      {currentUser ? (\n        <>\n          <p>You are logged in</p>\n          <Link to=\"/\">Select Mood Now</Link>\n          <br />\n          <br />\n          <button onClick={() => signOut()}>Sign out</button>\n        </>\n      ) : (\n        <p>\n          <Link to=\"/login\">Log In</Link> or{\" \"}\n          <Link to=\"/signup\">Sign Up</Link>\n        </p>\n      )}\n    </>\n  );\n};\n\nexport default Home;\n","import React, { useContext } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { AuthContext } from \"./Auth\";\nimport firebaseConfig from \"../firebase.js\";\n\nexport default function LogIn(props) {\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const { email, password } = e.target.elements;\n    try {\n      firebaseConfig\n        .auth()\n        .signInWithEmailAndPassword(email.value, password.value);\n    } catch (error) {\n      alert(error);\n    }\n  };\n  const { currentUser } = useContext(AuthContext);\n\n  if (currentUser) {\n    return <Redirect to=\"/\" />;\n  }\n\n  return (\n    <>\n      <h1>Log In</h1>\n      <form onSubmit={handleSubmit}>\n        <input type=\"email\" placeholder=\"Email\" name=\"email\" />\n        <input type=\"password\" name=\"password\" placeholder=\"Password\" />\n        <button type=\"submit\">Submit</button>\n      </form>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport firebaseConfig from \"../firebase.js\";\n\nconst SignUp = (props) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const { email, password } = e.target.elements;\n    try {\n      firebaseConfig\n        .auth()\n        .createUserWithEmailAndPassword(email.value, password.value);\n      setCurrentUser(true);\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  if (currentUser) {\n    return <Redirect to=\"/\" />;\n  }\n\n  return (\n    <>\n      <h1>Sign Up</h1>\n      <form onSubmit={handleSubmit}>\n        <input\n          onChange={props.getUserEmail}\n          id=\"email\"\n          value={props.email}\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Email\"\n        />\n        <input type=\"password\" name=\"password\" placeholder=\"Password\" />\n        <button type=\"submit\">Submit</button>\n      </form>\n    </>\n  );\n};\n\nexport default SignUp;\n","export default __webpack_public_path__ + \"static/media/faceOne.fa6837e5.svg\";","export default __webpack_public_path__ + \"static/media/faceTwo.5db194b7.svg\";","export default __webpack_public_path__ + \"static/media/faceThree.f0df2ab2.svg\";","export default __webpack_public_path__ + \"static/media/faceFour.6b41455b.svg\";","export default __webpack_public_path__ + \"static/media/faceFive.e3f855ef.svg\";","export default __webpack_public_path__ + \"static/media/shimmerStar.c8bbbf27.svg\";","import React from \"react\";\nimport star from \"../img/shimmerStar.svg\";\nimport \"./Stars.css\"\n\nexport default function Stars() {\n  return (\n    <div>\n      <img alt=\"star\" className=\"bottomLeftLarge\" src={star}></img>\n      <img alt=\"star\" className=\"topRightLarge\" src={star}></img>\n      <img alt=\"star\" className=\"topRightBottom\" src={star}></img>\n      <img alt=\"star\" className=\"topRightTop\" src={star}></img>\n      <img alt=\"star\" className=\"bottomLeftBottom\" src={star}></img>\n      <img alt=\"star\" className=\"bottomLeftTop\" src={star}></img>\n    </div>\n  );\n}\n","import React from 'react';\nconst Emoji = props => (\n    <span\n        className=\"emoji\"\n        role=\"img\"\n        aria-label={props.label ? props.label : \"\"}\n        aria-hidden={props.label ? \"false\" : \"true\"}\n    >\n        {props.symbol}\n    </span>\n);\nexport default Emoji;","export default __webpack_public_path__ + \"static/media/backBtn.2e262040.svg\";","import React from \"react\";\nimport backBtn from \"../img/backBtn.svg\";\nimport \"./BackBtn.css\";\n\nexport default function BackBtn(props) {\n  return (\n    <img\n      alt=\"back button\"\n      className=\"backBtn\"\n      src={backBtn}\n    ></img>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/lineGraphBtn.4a88dd84.svg\";","export default __webpack_public_path__ + \"static/media/barGraphBtn.0d30f57a.svg\";","export const convertNumToEmotion = (num) => {\n  num = parseFloat(num);\n  if (num === 1) {\n    return \"Extremely Sad\";\n  } else if (num === 2) {\n    return \"Sad\";\n  } else if (num === 3) {\n    return \"Neutral\";\n  } else if (num === 4) {\n    return \"Happy\";\n  } else if (num === 5) {\n    return \"Extremely Happy\";\n  }\n};\n\nfunction indexOfMax(arr) {\n  if (arr.length === 0) {\n    return -1;\n  }\n\n  var max = arr[0];\n  var maxIndex = 0;\n\n  for (var i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      maxIndex = i;\n      max = arr[i];\n    }\n  }\n\n  return maxIndex;\n}\n\nexport const findMostCommonTag = (allMoods, month) => {\n  if (allMoods.length > 0) {\n    var arr = [];\n    if (month === \"allTime\") {\n      for (let i = 0; i < allMoods.length; i++) {\n        for (let j = 0; j < allMoods[i].tags.length; j++) {\n          arr.push(allMoods[i].tags[j]);\n        }\n      }\n    } else {\n      for (let i = 0; i < month.length; i++) {\n        for (let j = 0; j < month[i].length; j++) {\n          arr.push(month[i][j]);\n        }\n      }\n    }\n\n    var a = [],\n      b = [],\n      prev;\n\n    arr.sort();\n    for (var i = 0; i < arr.length; i++) {\n      if (arr[i] !== prev) {\n        a.push(arr[i]);\n        b.push(1);\n      } else {\n        b[b.length - 1]++;\n      }\n      prev = arr[i];\n    }\n    var result = [a, b];\n    var index = indexOfMax(result[1]);\n    var tag = result[0].splice(index, 1);\n    var index2 = result[1].splice(index, 1);\n    index2 = indexOfMax(result[1]);\n    var tag2 = result[0].splice(index2, 1);\n    return tag.length > 0 && tag2.length > 0 && month === \"allTime\"\n      ? tag + \", \" + tag2\n      : tag.length > 0\n      ? tag\n      : \"No tags selected yet.\";\n  }\n};\n","import React from \"react\";\nimport \"./StatBox.css\";\nimport { convertNumToEmotion, findMostCommonTag } from \"../helpers.js\";\n\nconst findMostCommonMood = (allMoods) => {\n  if (allMoods.length > 0) {\n    for (let i = 0; i < allMoods.length; i++) {\n      allMoods.sort((x, y) => x - y);\n\n      var bestStreak = 1;\n      var bestElem = allMoods[0].feeling;\n      var currentStreak = 1;\n      var currentElem = allMoods[0].feeling;\n\n      for (let i = 1; i < allMoods.length; i++) {\n        if (allMoods[i - 1].feeling !== allMoods[i].feeling) {\n          if (currentStreak > bestStreak) {\n            bestStreak = currentStreak;\n            bestElem = currentElem;\n          }\n\n          currentStreak = 0;\n          currentElem = allMoods[i].feeling;\n        }\n\n        currentStreak++;\n      }\n\n      var num = currentStreak > bestStreak ? currentElem : bestElem;\n      return convertNumToEmotion(num);\n    }\n  } else return \"Happy\";\n};\n\nexport default function StatBox(props) {\n  return (\n    <div className=\"statBox\">\n      <h3>Your most common stats</h3>\n      <div className=\"boxInsideStatBox\">\n        <p>\n          <b>Mood: </b> {findMostCommonMood(props.allMoods, \"feeling\")}\n        </p>\n        <br />\n        <p>\n          <b>Tags: </b> {findMostCommonTag(props.allMoods, \"allTime\")}\n        </p>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport \"./GraphPage.css\";\nimport { motion } from \"framer-motion\";\nimport BackBtn from \"../BackBtn/BackBtn\";\nimport { Bar, Line } from \"react-chartjs-2\";\nimport f1 from \"../img/faceOne.svg\";\nimport f2 from \"../img/faceTwo.svg\";\nimport f3 from \"../img/faceThree.svg\";\nimport f4 from \"../img/faceFour.svg\";\nimport f5 from \"../img/faceFive.svg\";\nimport lg from \"../img/lineGraphBtn.svg\";\nimport bg from \"../img/barGraphBtn.svg\";\nimport StatBox from \"../StatBox/StatBox\";\nimport { convertNumToEmotion, findMostCommonTag } from \"../helpers.js\";\nimport { AuthContext } from \"../Auth/Auth\";\nimport MoodExp from \"../MoodExp/MoodExp\";\nimport SelectMood from \"../SelectMood/SelectMood\";\n\nexport default class GraphPage extends Component {\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      graphData: {},\n      timeRange: \"week\",\n      lineClicked: true,\n      barClicked: false,\n      graphBackBtnClicked: false,\n    };\n  }\n\n  async componentDidMount() {\n    if (this.props.mood.feeling !== 0) {\n      await this.props.pushMoodToDb();\n    }\n    if (this.props.allMoods.length === 0) {\n      await this.props.fetchData();\n    }\n    this.getGraphData();\n  }\n\n  handleTimeRangeClicked = (e) => {\n    this.setState({ timeRange: e.target.value }, this.getGraphData);\n  };\n\n  removeLineAddBar = () => {\n    this.setState({\n      lineClicked: false,\n      barClicked: true,\n    });\n  };\n\n  removeBarAddLine = () => {\n    this.setState({\n      barClicked: false,\n      lineClicked: true,\n    });\n  };\n\n  setGraphBackBtnClicked = () => {\n    this.setState({\n      graphBackBtnClicked: true,\n    });\n  };\n\n  addDynamicGraphColoring = () => {\n    var backgroundColors = [];\n    var data = this.getLabelsAndDataForTimeRange().data.datasets.data;\n    for (let i = 0; i < data.length; i++) {\n      if (data[i] === 0) {\n        backgroundColors.push(\"white\");\n      } else if (data[i] > 0 && data[i] < 1.5) {\n        backgroundColors.push(\"#7FBEF9\");\n      } else if (data[i] >= 1.5 && data[i] < 2.5) {\n        backgroundColors.push(\"#BBDDFB\");\n      } else if (data[i] >= 2.5 && data[i] < 3.5) {\n        backgroundColors.push(\"#FFE457\");\n      } else if (data[i] >= 3.5 && data[i] < 4.5) {\n        backgroundColors.push(\"#FFD954\");\n      } else if (data[i] >= 4.5 && data[i] < 6) {\n        backgroundColors.push(\"#F8C144\");\n      }\n    }\n    return backgroundColors;\n  };\n\n  addGraphGradient = () => {\n    var ctx = document.getElementById(\"lineChart\").getContext(\"2d\");\n    var gradient = ctx.createLinearGradient(0, 0, 0, 400);\n    gradient.addColorStop(0, \"rgba(255, 240, 164, 1)\");\n    gradient.addColorStop(1, \"rgba(255, 255, 255, 0) 0)\");\n    return gradient;\n  };\n\n  getDaysInMonth = () => {\n    var now = new Date();\n    var days = new Date(now.getFullYear(), now.getMonth() + 1, 0).getDate();\n    var arrayOfDays = [];\n    for (let i = 1; i <= days; i++) {\n      arrayOfDays.push(i);\n    }\n    return arrayOfDays;\n  };\n\n  getWeekData = (allMoods, dataRequested, index) => {\n    let curr = new Date();\n    let weekData = [];\n    let week = [];\n    let indexes = [];\n    let notesData = [];\n    let tagsData = [];\n\n    for (let i = 0; i < 7; i++) {\n      let first = curr.getDate() - curr.getDay() + i;\n      let day = new Date(curr.setDate(first)).toISOString().slice(0, 10);\n      week.push(day);\n      weekData.push(0);\n      notesData.push(\"\");\n      tagsData.push(\"\");\n    }\n\n    //get indexes of week days that have a mood\n    for (let i = 0; i < allMoods.length; i++) {\n      for (let j = 0; j < week.length; j++) {\n        if (allMoods[i].date === week[j]) {\n          indexes.push(j);\n        }\n      }\n    }\n\n    //add feeling num to weekdata\n    for (let i = 0; i < indexes.length; i++) {\n      for (let j = 0; j < week.length; j++) {\n        if (indexes[i] === j) {\n          weekData.splice(j, 1, allMoods[i].feeling);\n          notesData.splice(j, 1, allMoods[i].explanation);\n          tagsData.splice(j, 1, allMoods[i].tags);\n        }\n      }\n    }\n\n    if (dataRequested === \"exp\") {\n      return notesData[index];\n    } else if (dataRequested === \"tags\") {\n      return tagsData[index].join(\", \");\n    } else if (dataRequested === \"feelings\") {\n      return weekData;\n    }\n  };\n\n  getMonthData = (allMoods, dataRequested, index) => {\n    var month = new Date().getMonth();\n    var year = new Date().getFullYear();\n    var date = new Date(year, month, 1);\n    var days = [];\n    let indexes = [];\n    var monthData = [];\n    let notesData = [];\n    let tagsData = [];\n\n    while (date.getMonth() === month) {\n      days.push(date.toISOString().slice(0, 10));\n      date.setDate(date.getDate() + 1);\n      monthData.push(0);\n      notesData.push(\"\");\n      tagsData.push(\"\");\n    }\n    for (let i = 0; i < allMoods.length; i++) {\n      for (let j = 0; j < days.length; j++) {\n        if (allMoods[i].date === days[j]) {\n          indexes.push(j);\n        }\n      }\n    }\n    for (let i = 0; i < indexes.length; i++) {\n      for (let j = 0; j < days.length; j++) {\n        if (indexes[i] === j) {\n          monthData.splice(j, 1, allMoods[i].feeling);\n          notesData.splice(j, 1, allMoods[i].explanation);\n          tagsData.splice(j, 1, allMoods[i].tags);\n        }\n      }\n    }\n    if (dataRequested === \"exp\") {\n      return notesData[index];\n    } else if (dataRequested === \"tags\") {\n      return tagsData[index].join(\", \");\n    } else if (dataRequested === \"feelings\") {\n      return monthData;\n    }\n  };\n\n  getYearlyAverages = (allMoods, dataRequested, index) => {\n    var year = new Date().getFullYear();\n    var date = new Date(year, 0, 1);\n    var days = [];\n    var yearData = [];\n    var indexes = [];\n    var tagsData = [];\n    var yearAverages = [];\n    var month = 0;\n    var total = 0;\n    var count = 0;\n    var totalArr = [];\n    var monthlyTags = [];\n    var numDaysCompletedInMonth = 0;\n\n    while (date.getYear() + 1900 === year) {\n      days.push(date.toISOString().slice(0, 10));\n      date.setDate(date.getDate() + 1);\n      yearData.push(0);\n      tagsData.push([]);\n    }\n    for (let i = 0; i < allMoods.length; i++) {\n      for (let j = 0; j < days.length; j++) {\n        if (allMoods[i].date === days[j]) {\n          indexes.push(j);\n        }\n      }\n    }\n    for (let i = 0; i < indexes.length; i++) {\n      for (let j = 0; j < days.length; j++) {\n        if (indexes[i] === j) {\n          yearData.splice(j, 1, allMoods[i].feeling);\n          tagsData.splice(j, 1, allMoods[i].tags);\n        }\n      }\n    }\n\n    while (date.getMonth() === month) {\n      total += yearData[count];\n      totalArr.push(tagsData[count]);\n      count++;\n      if (yearData[count] !== 0) {\n        numDaysCompletedInMonth++;\n      }\n      date.setDate(date.getDate() + 1);\n      if (date.getMonth() !== month) {\n        month++;\n        if (total !== 0) {\n          yearAverages.push(total / numDaysCompletedInMonth);\n          monthlyTags.push(totalArr);\n        } else {\n          yearAverages.push(total / this.getDaysInMonth().length);\n          monthlyTags.push(\"\");\n        }\n        totalArr = [];\n        numDaysCompletedInMonth = 0;\n        total = 0;\n        totalArr = [];\n      }\n    }\n    if (dataRequested === \"tags\") {\n      return findMostCommonTag(allMoods, monthlyTags[index]);\n    } else {\n      return yearAverages;\n    }\n  };\n\n  getLabelsAndDataForTimeRange = () => {\n    let data;\n    if (this.state.timeRange === \"week\") {\n      data = {\n        labels: [\"Sun\", \"Mon\", \"Tues\", \"Wed\", \"Thurs\", \"Fri\", \"Sat\"],\n        datasets: {\n          data: this.getWeekData(this.props.allMoods, \"feelings\"),\n        },\n      };\n    } else if (this.state.timeRange === \"month\") {\n      data = {\n        labels: this.getDaysInMonth(),\n        datasets: {\n          data: this.getMonthData(this.props.allMoods, \"feelings\"),\n        },\n      };\n    } else if (this.state.timeRange === \"year\") {\n      data = {\n        labels: [\n          \"Jan\",\n          \"Feb\",\n          \"Mar\",\n          \"Apr\",\n          \"May\",\n          \"Jun\",\n          \"Jul\",\n          \"Aug\",\n          \"Sep\",\n          \"Oct\",\n          \"Nov\",\n          \"Dec\",\n        ],\n        datasets: {\n          data: this.getYearlyAverages(this.props.allMoods),\n        },\n      };\n    }\n    return { data };\n  };\n\n  breakString = (str, limit) => {\n    let brokenString = \"\";\n    for (let i = 0, count = 0; i < str.length; i++) {\n      if (count >= limit && str[i] === \" \") {\n        count = 0;\n        brokenString += \"\\n\";\n      } else {\n        count++;\n        brokenString += str[i];\n      }\n    }\n    return brokenString;\n  };\n\n  getNotesAndTagsOnGraphHover = (item) => {\n    const { allMoods } = this.props;\n    const { timeRange } = this.state;\n    var hoverInfo;\n    if (timeRange === \"week\") {\n      let weekExp = this.getWeekData(allMoods, \"exp\", item[0].dataIndex);\n      let weekTags = this.getWeekData(allMoods, \"tags\", item[0].dataIndex);\n      hoverInfo =\n        \"Mood: \" +\n        convertNumToEmotion(Math.round(item[0].raw)) +\n        (weekExp ? \" \\nNotes: \" + this.breakString(weekExp, 33) : \"\") +\n        (weekTags ? \" \\nTags: \" + this.breakString(weekTags, 30) : \"\");\n    } else if (timeRange === \"month\") {\n      let monthExp = this.getMonthData(allMoods, \"exp\", item[0].dataIndex);\n      let monthTags = this.getMonthData(allMoods, \"tags\", item[0].dataIndex);\n      hoverInfo =\n        \"Mood: \" +\n        convertNumToEmotion(Math.round(item[0].raw)) +\n        (monthExp ? \" \\nNotes: \" + this.breakString(monthExp, 33) : \"\") +\n        (monthTags ? \" \\nTags: \" + this.breakString(monthTags, 30) : \"\");\n    } else if (timeRange === \"year\") {\n      hoverInfo =\n        `Mood average: ` +\n        convertNumToEmotion(Math.round(item[0].raw)) +\n        \" \\nMost common tag: \" +\n        this.getYearlyAverages(allMoods, \"tags\", item[0].dataIndex);\n    }\n    return hoverInfo;\n  };\n\n  componentWillUnmount() {\n    this.setState = (state, callback) => {\n      return;\n    };\n  }\n\n  getGraphData = () => {\n    const dataLabels = this.getLabelsAndDataForTimeRange().data.labels;\n    const numericalData =\n      this.getLabelsAndDataForTimeRange().data.datasets.data;\n    let self = this;\n    const options = {\n      plugins: {\n        legend: {\n          display: false,\n        },\n        tooltip: {\n          callbacks: {\n            title: function (item, everything) {\n              return self.getNotesAndTagsOnGraphHover(item);\n            },\n            label: function (item, everything) {\n              return;\n            },\n          },\n          backgroundColor: \"#484848\",\n          padding: \"7\",\n          xAlign: \"left\",\n        },\n      },\n      scales: {\n        y: {\n          display: false,\n          min: 0.8,\n          max: 5.23,\n          ticks: {\n            display: false,\n            stepSize: 1,\n          },\n        },\n        x: {\n          ticks: {\n            color: \"black\",\n            font: {\n              size: 11,\n            },\n          },\n          grid: {\n            display: false,\n          },\n        },\n      },\n    };\n    this.setState({\n      graphData: {\n        data: {\n          labels: dataLabels,\n          datasets: [\n            {\n              data: numericalData,\n              fill: true,\n              backgroundColor: this.addGraphGradient(),\n              borderColor: \"#ededed\",\n              borderWidth: 1,\n              pointBackgroundColor: this.addDynamicGraphColoring(),\n              pointBorderColor: \"transparent\",\n              pointRadius: 7,\n              pointHoverRadius: 6,\n            },\n          ],\n        },\n        barData: {\n          labels: dataLabels,\n          datasets: [\n            {\n              data: numericalData,\n              backgroundColor: this.addDynamicGraphColoring(),\n              border: false,\n            },\n          ],\n        },\n        options: options,\n      },\n    });\n  };\n\n  render() {\n    return (\n      <>\n        {!this.state.graphBackBtnClicked ? (\n          <>\n            <div onClick={this.setGraphBackBtnClicked}>\n              <BackBtn></BackBtn>\n            </div>\n            <div className=\"graph\">\n              <div className=\"graphHeaderContainer\">\n                <h1>Your mood over time with Shimmer</h1>\n                <StatBox allMoods={this.props.allMoods}></StatBox>\n                <div className=\"buttonContainer\">\n                  <button\n                    value=\"week\"\n                    onClick={this.handleTimeRangeClicked}\n                    className=\"week\"\n                  >\n                    Week\n                  </button>\n                  <button\n                    value=\"month\"\n                    onClick={this.handleTimeRangeClicked}\n                    className=\"month\"\n                  >\n                    Month\n                  </button>\n                  <button\n                    value=\"year\"\n                    onClick={this.handleTimeRangeClicked}\n                    className=\"year\"\n                  >\n                    Year\n                  </button>\n                </div>\n              </div>\n              <div\n                className={this.state.lineClicked ? \"graphHolder\" : \"hidden\"}\n              >\n                <div className=\"graphColOfFaces\">\n                  <img alt=\"cartoon face\" src={f5}></img>\n                  <img alt=\"cartoon face\" src={f4}></img>\n                  <img alt=\"cartoon face\" src={f3}></img>\n                  <img alt=\"cartoon face\" src={f2}></img>\n                  <img alt=\"cartoon face\" src={f1}></img>\n                </div>\n                <Line\n                  className=\"graphs\"\n                  id=\"lineChart\"\n                  data={this.state.graphData.data}\n                  options={this.state.graphData.options}\n                />\n              </div>\n              <div className={this.state.barClicked ? \"graphHolder\" : \"hidden\"}>\n                <div className=\"graphColOfFaces\">\n                  <img alt=\"cartoon face\" src={f5}></img>\n                  <img alt=\"cartoon face\" src={f4}></img>\n                  <img alt=\"cartoon face\" src={f3}></img>\n                  <img alt=\"cartoon face\" src={f2}></img>\n                  <img alt=\"cartoon face\" src={f1}></img>\n                </div>\n                <Bar\n                  id=\"barChart\"\n                  className=\"graphs\"\n                  data={this.state.graphData.barData}\n                  options={this.state.graphData.options}\n                />\n              </div>\n              <img\n                onClick={this.removeLineAddBar}\n                alt=\"switch graph btn\"\n                className=\"switchGraphLine\"\n                src={bg}\n              ></img>\n              <img\n                onClick={this.removeBarAddLine}\n                alt=\"switch graph btn\"\n                className=\"switchGraphBar\"\n                src={lg}\n              ></img>\n            </div>\n          </>\n        ) : this.props.mood.feeling === 0 ? (\n          <>\n            <SelectMood\n              mood={this.props.mood}\n              getExp={this.props.getExp}\n              getTags={this.props.getTags}\n              pageTransition={this.props.pageTransition}\n              pageVariants={this.props.pageVariants}\n              getMoodClicked={this.props.getMoodClicked}\n              dateMoodWasLastEntered={this.props.dateMoodWasLastEntered}\n              allMoods={this.props.allMoods}\n              addToAllMoods={this.props.addToAllMoods}\n              fetchData={this.props.fetchData}\n              pushMoodToDb={this.props.pushMoodToDb}\n              removeAllMoods={this.props.removeAllMoods}\n              db={this.props.db}\n              updateShowMood={this.props.updateShowMood}\n              showMood={this.props.showMood}\n            ></SelectMood>\n          </>\n        ) : (\n          <MoodExp\n            mood={this.props.mood}\n            getExp={this.props.getExp}\n            getTags={this.props.getTags}\n            pageTransition={this.props.pageTransition}\n            pageVariants={this.props.pageVariants}\n            getMoodClicked={this.props.getMoodClicked}\n            dateMoodWasLastEntered={this.props.dateMoodWasLastEntered}\n            allMoods={this.props.allMoods}\n            addToAllMoods={this.props.addToAllMoods}\n            fetchData={this.props.fetchData}\n            pushMoodToDb={this.props.pushMoodToDb}\n            removeAllMoods={this.props.removeAllMoods}\n            db={this.props.db}\n            updateShowMood={this.props.updateShowMood}\n            showMood={this.props.showMood}\n          />\n        )}\n      </>\n    );\n  }\n}\n","import React, { useState } from \"react\";\nimport \"./MoodExp.css\";\nimport Emoji from \"../Emoji.js\";\nimport { motion } from \"framer-motion\";\nimport Stars from \"../Stars/Stars\";\nimport BackBtn from \"../BackBtn/BackBtn\";\nimport SelectMood from \"../SelectMood/SelectMood\";\nimport GraphPage from \"../GraphPage/GraphPage\";\n\nexport default function MoodExp(props) {\n  const tags = props.mood.tags;\n  const [submitClicked, setSubmitClicked] = useState(false);\n  return (\n    <>\n      {props.showMood ? (\n        !submitClicked ? (\n          <>\n            <Stars></Stars>\n            <div onClick={() => props.updateShowMood(false)}>\n              <BackBtn></BackBtn>\n            </div>\n            <motion.div\n              className=\"moodExp\"\n              initial=\"out\"\n              animate=\"in\"\n              exit=\"outFade\"\n              transition={props.pageTransition}\n              variants={props.pageVariants}\n            >\n              {props.mood.feeling !== 0 && props.mood.feeling !== 3 ? (\n                props.mood.feeling === 4 || props.mood.feeling === 5 ? (\n                  <h1>Awesome! What's on your mind?</h1>\n                ) : (\n                  <h1>Oh no, what's on your mind?</h1>\n                )\n              ) : (\n                <h1>What's on your mind?</h1>\n              )}\n              <div className=\"btnTags\">\n                <button\n                  onClick={props.getTags}\n                  className={\n                    tags.includes(\"Work\") ? \"tags workClicked\" : \"tags\"\n                  }\n                  value=\"Work\"\n                >\n                  <Emoji symbol=\"📆\" /> Work\n                </button>\n                <button\n                  onClick={props.getTags}\n                  className={\n                    tags.includes(\"Family\") ? \"tags famClicked\" : \"tags\"\n                  }\n                  value=\"Family\"\n                >\n                  <Emoji symbol=\"👨‍👨‍👧\" /> Family\n                </button>\n                <button\n                  onClick={props.getTags}\n                  className={\n                    tags.includes(\"Relationship\") ? \"tags relClicked\" : \"tags\"\n                  }\n                  value=\"Relationship\"\n                >\n                  <Emoji symbol=\"👩‍❤️‍👩\" /> Relationship\n                </button>\n                <button\n                  onClick={props.getTags}\n                  className={\n                    tags.includes(\"Friends\") ? \"tags friClicked\" : \"tags\"\n                  }\n                  value=\"Friends\"\n                >\n                  <Emoji symbol=\"👯‍♀️\" /> Friends\n                </button>\n                <button\n                  onClick={props.getTags}\n                  className={\n                    tags.includes(\"Health\") ? \"tags healthClicked\" : \"tags\"\n                  }\n                  value=\"Health\"\n                >\n                  <Emoji symbol=\"😷\" /> Health\n                </button>\n                <button\n                  onClick={props.getTags}\n                  className={\n                    tags.includes(\"Exercise\") ? \"tags exClicked\" : \"tags\"\n                  }\n                  value=\"Exercise\"\n                >\n                  <Emoji symbol=\"🚴\" /> Exercise\n                </button>\n                <button\n                  onClick={props.getTags}\n                  className={\n                    tags.includes(\"Travel\") ? \"tags travClicked\" : \"tags\"\n                  }\n                  value=\"Travel\"\n                >\n                  <Emoji symbol=\"🏝\" /> Travel\n                </button>\n                <button\n                  onClick={props.getTags}\n                  className={\n                    tags.includes(\"Mindfulness\") ? \"tags mindClicked\" : \"tags\"\n                  }\n                  value=\"Mindfulness\"\n                >\n                  <Emoji symbol=\"🧠\" /> Mindfulness\n                </button>\n                <button\n                  onClick={props.getTags}\n                  className={\n                    tags.includes(\"Food\") ? \"tags foodClicked\" : \"tags\"\n                  }\n                  value=\"Food\"\n                >\n                  <Emoji symbol=\"🌮\" /> Food\n                </button>\n                <button\n                  onClick={props.getTags}\n                  className={\n                    tags.includes(\"Education\") ? \"tags eduClicked\" : \"tags\"\n                  }\n                  value=\"Education\"\n                >\n                  <Emoji symbol=\"📚\" /> Education\n                </button>\n              </div>\n              <input\n                onChange={props.getExp}\n                placeholder=\"Add any notes you'd like!\"\n                className=\"whyMood\"\n                name=\"whyMood\"\n                autoComplete=\"off\"\n              ></input>\n              <br />\n              <button onClick={() => setSubmitClicked(true)} type=\"submit\">\n                Submit\n              </button>\n            </motion.div>\n          </>\n        ) : (\n          <GraphPage\n            allMoods={props.allMoods}\n            pageTransition={props.pageTransition}\n            pageVariants={props.pageVariants}\n            mood={props.mood}\n            addToAllMoods={props.addToAllMoods}\n            fetchData={props.fetchData}\n            pushMoodToDb={props.pushMoodToDb}\n            removeAllMoods={props.removeAllMoods}\n            getExp={props.getExp}\n            getMoodClicked={props.getMoodClicked}\n            getTags={props.getTags}\n            db={props.db}\n            date={props.mood.date}\n            dateMoodWasLastEntered={props.dateMoodWasLastEntered}\n            updateShowMood={props.updateShowMood}\n            showMood={props.showMood}\n          ></GraphPage>\n        )\n      ) : (\n        <SelectMood\n          mood={props.mood}\n          getExp={props.getExp}\n          getTags={props.getTags}\n          getMoodClicked={props.getMoodClicked}\n          date={props.mood.date}\n          dateMoodWasLastEntered={props.dateMoodWasLastEntered}\n          allMoods={props.allMoods}\n          addToAllMoods={props.addToAllMoods}\n          fetchData={props.fetchData}\n          pushMoodToDb={props.pushMoodToDb}\n          removeAllMoods={props.removeAllMoods}\n          db={props.db}\n          pageTransition={props.pageTransition}\n          pageVariants={props.pageVariants}\n          updateShowMood={props.updateShowMood}\n          showMood={props.showMood}\n        ></SelectMood>\n      )}\n    </>\n  );\n}\n","import React, { useContext } from \"react\";\nimport \"./SelectMood.css\";\nimport f1 from \"../img/faceOne.svg\";\nimport f2 from \"../img/faceTwo.svg\";\nimport f3 from \"../img/faceThree.svg\";\nimport f4 from \"../img/faceFour.svg\";\nimport f5 from \"../img/faceFive.svg\";\nimport Stars from \"../Stars/Stars\";\nimport { AuthContext } from \"../Auth/Auth\";\nimport MoodExp from \"../MoodExp/MoodExp\";\n\nexport default function SelectMood(props) {\n  const { currentUser } = useContext(AuthContext);\n  return (\n    <>\n      {!props.showMood || props.mood.feeling === 0 ? (\n        <>\n          <Stars></Stars>\n          <div className=\"selectMood\">\n            <h1 className=\"welcome\">\n              Welcome back{\" \"}\n              {currentUser\n                ? currentUser.email.substring(\n                    0,\n                    currentUser.email.lastIndexOf(\"@\")\n                  )\n                : \":)\"}{\" \"}\n              <br /> How are you feeling today?\n            </h1>\n            <img\n              className=\"sad\"\n              alt=\"sad face\"\n              id={1}\n              onClick={props.getMoodClicked}\n              src={f1}\n            ></img>\n            <img\n              className=\"nw\"\n              alt=\"not well face\"\n              id={2}\n              onClick={props.getMoodClicked}\n              src={f2}\n            ></img>\n            <img\n              className=\"neutral\"\n              alt=\"neutral face\"\n              id={3}\n              onClick={props.getMoodClicked}\n              src={f3}\n            ></img>\n            <img\n              className=\"happy\"\n              alt=\"happy face\"\n              id={4}\n              onClick={props.getMoodClicked}\n              src={f4}\n            ></img>\n            <img\n              className=\"jub\"\n              alt=\"jubilant face\"\n              id={5}\n              onClick={props.getMoodClicked}\n              src={f5}\n            ></img>\n          </div>\n        </>\n      ) : (\n        <MoodExp\n          mood={props.mood}\n          getExp={props.getExp}\n          getTags={props.getTags}\n          pageTransition={props.pageTransition}\n          pageVariants={props.pageVariants}\n          getMoodClicked={props.getMoodClicked}\n          dateMoodWasLastEntered={props.dateMoodWasLastEntered}\n          allMoods={props.allMoods}\n          addToAllMoods={props.addToAllMoods}\n          fetchData={props.fetchData}\n          pushMoodToDb={props.pushMoodToDb}\n          db={props.db}\n          removeAllMoods={props.removeAllMoods}\n          updateShowMood={props.updateShowMood}\n          showMood={props.showMood}\n        />\n      )}\n    </>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport SelectMood from \"./SelectMood/SelectMood\";\nimport GraphPage from \"./GraphPage/GraphPage\";\n\nexport default function ConditionalRenderHelp(props) {\n  // useEffect(() => {\n  //   props.fetchLastDateEntered.call(null);\n  // }, [props.fetchLastDateEntered]);\n\n  useEffect(() => {\n    props.fetchLastDateEntered();\n  }, []);\n\n  return (\n    <>\n      {props.mood.date === props.dateMoodWasLastEntered ? (\n        <GraphPage\n          allMoods={props.allMoods}\n          pageTransition={props.pageTransition}\n          pageVariants={props.pageVariants}\n          mood={props.mood}\n          addToAllMoods={props.addToAllMoods}\n          fetchData={props.fetchData}\n          pushMoodToDb={props.pushMoodToDb}\n          removeAllMoods={props.removeAllMoods}\n          getExp={props.getExp}\n          getMoodClicked={props.getMoodClicked}\n          getTags={props.getTags}\n          db={props.db}\n          dateMoodWasLastEntered={props.dateMoodWasLastEntered}\n          showMood={props.showMood}\n          updateShowMood={props.updateShowMood}\n        ></GraphPage>\n      ) : (\n        <>\n          <SelectMood\n            mood={props.mood}\n            getExp={props.getExp}\n            getTags={props.getTags}\n            getMoodClicked={props.getMoodClicked}\n            dateMoodWasLastEntered={props.dateMoodWasLastEntered}\n            allMoods={props.allMoods}\n            addToAllMoods={props.addToAllMoods}\n            fetchData={props.fetchData}\n            pushMoodToDb={props.pushMoodToDb}\n            removeAllMoods={props.removeAllMoods}\n            pageTransition={props.pageTransition}\n            pageVariants={props.pageVariants}\n            db={props.db}\n            showMood={props.showMood}\n            updateShowMood={props.updateShowMood}\n          ></SelectMood>\n        </>\n      )}\n    </>\n  );\n}\n","import React, { Component } from \"react\";\nimport \"./MoodTracker.css\";\nimport { Route, Switch, BrowserRouter as Router } from \"react-router-dom\";\nimport { AnimatePresence } from \"framer-motion\";\nimport Home from \"../Auth/Home\";\nimport LogIn from \"../Auth/LogIn\";\nimport SignUp from \"../Auth/SignUp\";\nimport { AuthContext } from \"../Auth/Auth\";\nimport firebase from \"../firebase\";\nimport ConditionalRenderHelp from \"../ConditionalRenderHelp\";\n\nconst pageVariants = {\n  in: {\n    opacity: 1,\n    x: 0,\n  },\n  out: {\n    opacity: 0,\n    x: \"-100vw\",\n  },\n  outRight: {\n    opacity: 0,\n    x: \"100vw\",\n  },\n  outFade: {\n    opacity: 0,\n  },\n};\n\nconst pageTransition = {\n  transition: \"linear\",\n  duration: 0.3,\n};\n\nconst db = firebase.firestore();\n\nexport default class MoodTracker extends Component {\n  static contextType = AuthContext;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      mood: {\n        feeling: 0,\n        explanation: \"\",\n        tags: [],\n        key: \"\",\n        date: \"\",\n      },\n      allMoods: [], //array of all mood objects\n      email: \"\",\n      password: \"\",\n      dateMoodWasLastEntered: \"\",\n      showMood: true,\n    };\n  }\n\n  async componentDidMount() {\n    await this.fetchLastDateEntered();\n    var tzoffset = new Date().getTimezoneOffset() * 60000; //offset in milliseconds\n    this.setState({\n      mood: {\n        ...this.state.mood,\n        date: new Date(Date.now() - tzoffset).toISOString().slice(0, 10),\n      },\n    });\n  }\n\n  pushMoodToDb = async () => {\n    if (this.context.currentUser) {\n      let state = this.state;\n      let self = this;\n      var moodTrackerUserRef = db\n        .collection(\"moodTracker\")\n        .doc(this.context.currentUser.uid);\n      var docId;\n      await moodTrackerUserRef.get().then((doc) => {\n        if (!doc.exists) {\n          moodTrackerUserRef.set({\n            todaysMoodDocId: \"\",\n            lastDateEntered: state.mood.date,\n          });\n          docId = \"\";\n          this.updateLastDateMoodEntered(\"no date\");\n        } else {\n          docId = doc.data().todaysMoodDocId;\n          this.updateLastDateMoodEntered(doc.data().lastDateEntered);\n        }\n      });\n      if (state.mood.date !== state.dateMoodWasLastEntered || docId === \"\") {\n        await moodTrackerUserRef\n          .collection(\"date\")\n          .add({\n            feeling: state.mood.feeling,\n            explanation: state.mood.explanation,\n            setMoodForToday: true,\n            tags: state.mood.tags,\n            date: state.mood.date,\n          })\n          .then(function (docRef) {\n            docId = docRef.id;\n            self.updateLastDateMoodEntered(state.mood.date);\n            moodTrackerUserRef.set({\n              todaysMoodDocId: docId,\n              lastDateEntered: state.mood.date,\n            });\n          })\n          .catch(function (error) {\n            console.error(\"Error adding document: \", error);\n          });\n      } else {\n        this.removeAllMoods();\n        await moodTrackerUserRef.collection(\"date\").doc(docId).update({\n          feeling: this.state.mood.feeling,\n          explanation: this.state.mood.explanation,\n          tags: this.state.mood.tags,\n        });\n        await this.fetchData();\n      }\n    }\n  };\n\n  fetchData = async () => {\n    const { currentUser } = this.context;\n    var moodTrackerRef;\n    if (currentUser) {\n      moodTrackerRef = db\n        .collection(\"moodTracker\")\n        .doc(currentUser.uid)\n        .collection(\"date\");\n    } else {\n      moodTrackerRef = null;\n    }\n    if (moodTrackerRef) {\n      const snapshot = await moodTrackerRef.orderBy(\"date\", \"desc\").get();\n      if (snapshot.empty) {\n        return;\n      }\n      snapshot.forEach((doc) => {\n        this.addToAllMoods(doc.data());\n      });\n    }\n  };\n\n  fetchLastDateEntered = async () => {\n    if (this.context.currentUser) {\n      let self = this;\n      await db\n        .collection(\"moodTracker\")\n        .doc(self.context.currentUser.uid)\n        .get()\n        .then((doc) => {\n          if (doc.exists) {\n            self.updateLastDateMoodEntered(doc.data().lastDateEntered);\n          }\n        });\n    }\n  };\n\n  getUserEmail = (e) => {\n    this.setState({\n      email: e.target.value,\n    });\n  };\n\n  getMoodClicked = (e) => {\n    this.setState({\n      mood: {\n        ...this.state.mood,\n        feeling: parseFloat(e.target.id),\n        key: Date.now(),\n      },\n    });\n    this.updateShowMood(true);\n  };\n\n  getExp = (e) => {\n    this.setState({\n      mood: {\n        ...this.state.mood,\n        explanation: e.target.value,\n      },\n    });\n  };\n\n  removeTag = (e) => {\n    this.setState({\n      mood: {\n        ...this.state.mood,\n        tags: this.state.mood.tags.filter(function (t) {\n          return t !== e.target.value;\n        }),\n      },\n    });\n  };\n\n  removeAllMoods = () => {\n    this.setState({\n      allMoods: [],\n    });\n  };\n\n  getTags = (e) => {\n    this.state.mood.tags.includes(e.target.value)\n      ? this.removeTag(e)\n      : this.setState({\n          mood: {\n            ...this.state.mood,\n            tags: this.state.mood.tags.concat(e.target.value),\n          },\n        });\n  };\n\n  addToAllMoods = (mood) => {\n    this.setState({\n      allMoods: this.state.allMoods.concat(mood),\n    });\n  };\n\n  updateLastDateMoodEntered = async (date) => {\n    await this.setState({\n      dateMoodWasLastEntered: date,\n    });\n  };\n\n  updateShowMood = (bool) => {\n    this.setState({\n      showMood: bool,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"mood-tracker\">\n        <AnimatePresence>\n          <Router>\n            <Switch>\n              <Route\n                exact\n                path=\"/\"\n                render={(routeProps) => {\n                  return (\n                    <ConditionalRenderHelp\n                      mood={this.state.mood}\n                      getExp={this.getExp}\n                      getTags={this.getTags}\n                      getMoodClicked={this.getMoodClicked}\n                      date={this.state.mood.date}\n                      dateMoodWasLastEntered={this.state.dateMoodWasLastEntered}\n                      allMoods={this.state.allMoods}\n                      pageTransition={pageTransition}\n                      pageVariants={pageVariants}\n                      addToAllMoods={this.addToAllMoods}\n                      fetchData={this.fetchData}\n                      pushMoodToDb={this.pushMoodToDb}\n                      removeAllMoods={this.removeAllMoods}\n                      db={db}\n                      fetchLastDateEntered={this.fetchLastDateEntered}\n                      updateShowMood={this.updateShowMood}\n                      showMood={this.state.showMood}\n                      {...routeProps}\n                    />\n                  );\n                }}\n              />\n              <Route exact path=\"/home\" component={Home} />\n              <Route exact path=\"/login\" component={LogIn} />\n              <Route\n                exact\n                path=\"/signup\"\n                render={(routeProps) => {\n                  return (\n                    <SignUp\n                      getUserEmail={this.getUserEmail}\n                      db={db}\n                      email={this.state.email}\n                      {...routeProps}\n                    />\n                  );\n                }}\n              />\n            </Switch>\n          </Router>\n        </AnimatePresence>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport { AuthProvider } from \"./Auth/Auth\";\nimport MoodTracker from \"./MoodTracker/MoodTracker\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <AuthProvider>\n      <MoodTracker />\n    </AuthProvider>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}